@model _10.Models.Package
@using Microsoft.AspNetCore.Http
@using System.Globalization
@using System.Text.Json;

@{
    ViewData["Title"] = Model != null ? $"Package Details: {Model.TrackingNumber}" : "Package Details";
    var currentUserRole = ViewContext.HttpContext.Session.GetString("UserRole");
    var currentUserIdStr = ViewContext.HttpContext.Session.GetString("UserId");
    int.TryParse(currentUserIdStr, out int currentUserId);

    var historyPointsForMap = Model?.History
        .Where(h => h.Latitude.HasValue && h.Longitude.HasValue)
        .OrderBy(h => h.Timestamp)
        .Select(h => new {
            lat = h.Latitude.Value,
            lng = h.Longitude.Value,
            timestamp = h.Timestamp.ToString("yyyy-MM-dd HH:mm"),
            status = h.Status?.Description ?? "N/A"
        })
        .ToList() ;

    object? currentLocationForMap = null;
    if (Model?.Latitude.HasValue == true && Model?.Longitude.HasValue == true)
    {
        currentLocationForMap = new {
            lat = Model.Latitude.Value,
            lng = Model.Longitude.Value,
            status = Model.CurrentStatus?.Description ?? "Current Location"

        };
    }
}

@* Add Leaflet CSS in the head section or here if only for this page *@
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
      integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
      crossorigin="" />
<style>
    #packageMap {
        height: 450px;
        width: 100%;
        border-radius: var(--border-radius-lg);
        box-shadow: var(--shadow-md);
        border: 1px solid var(--light-gray);
    }
    .leaflet-popup-content-wrapper {
        border-radius: var(--border-radius-md);
    }
    .leaflet-popup-content {
        font-family: var(--font-family-base);
    }
    .leaflet-popup-content strong {
        color: var(--primary-yellow-dark);
    }
</style>

<div class="page-header mb-4">
    <h1><i class="fas fa-box-open me-3"></i>@ViewData["Title"]</h1>
    <p class="lead">Detailed information, location history, and current position of the selected package.</p>
</div>

@* @if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show shadow-sm" role="alert">
        <i class="fas fa-check-circle me-2"></i>
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
} *@
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show shadow-sm" role="alert">
        <i class="fas fa-exclamation-triangle me-2"></i>
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (Model == null)
{
    <div class="alert alert-warning shadow-sm">
        <i class="fas fa-info-circle me-2"></i>
        Could not load package details. The package may not exist or you may not have permission to view it.
    </div>
    <a href="@Url.Action("ActivePackages", "Courier")" class="btn btn-outline-secondary btn-lg mt-3">
        <i class="fas fa-arrow-left me-2"></i>Back to Package List
    </a>
}
else
{
    <div class="row g-4">
        <div class="col-lg-7">
            <div class="card shadow-custom h-100">
                <div class="card-header bg-yellow-light d-flex justify-content-between align-items-center">
                    <h5 class="mb-0 text-dark-gray"><i class="fas fa-cube me-2 text-yellow"></i>Package Overview</h5>
                    <span class="badge @GetStatusBadgeClass(Model.CurrentStatus?.Name) fs-6">@Model.CurrentStatus?.Name</span>
                </div>
                <div class="card-body p-4">
                    <dl class="row mb-0">
                        <dt class="col-sm-4 text-muted fw-medium"><i class="fas fa-barcode me-2"></i>Tracking Number</dt>
                        <dd class="col-sm-8 fw-bold text-yellow h5">@Html.DisplayFor(model => model.TrackingNumber)</dd>

                        <dt class="col-sm-4 text-muted fw-medium"><i class="fas fa-info-circle me-2"></i>Status Description</dt>
                        <dd class="col-sm-8">@(Model.CurrentStatus?.Description ?? "N/A")</dd>

                        <dt class="col-sm-4 text-muted fw-medium"><i class="fas fa-calendar-alt me-2"></i>Submission Date</dt>
                        <dd class="col-sm-8">@Model.SubmissionDate.ToString("yyyy-MM-dd HH:mm")</dd>

                        <dt class="col-sm-4 text-muted fw-medium"><i class="fas fa-calendar-check me-2"></i>Delivery Date</dt>
                        <dd class="col-sm-8">@(Model.DeliveryDate?.ToString("yyyy-MM-dd HH:mm") ?? "Not yet delivered")</dd>

                        <dt class="col-sm-4 text-muted fw-medium"><i class="fas fa-box me-2"></i>Size</dt>
                        <dd class="col-sm-8">@Html.DisplayFor(model => model.PackageSize)</dd>

                        @if (Model.WeightInKg.HasValue)
                        {
                            <dt class="col-sm-4 text-muted fw-medium"><i class="fas fa-weight-hanging me-2"></i>Weight</dt>
                            <dd class="col-sm-8">@Model.WeightInKg.Value.ToString("F2") kg</dd>
                        }

                        <dt class="col-sm-4 text-muted fw-medium"><i class="fas fa-map-marker-alt me-2"></i>Current Coordinates</dt>
                        <dd class="col-sm-8">
                            @if (Model.Latitude.HasValue && Model.Longitude.HasValue)
                            {
                                @($"Lat: {Model.Latitude.Value.ToString("F5", CultureInfo.InvariantCulture)}, Lon: {Model.Longitude.Value.ToString("F5", CultureInfo.InvariantCulture)}")
                            }
                            else
                            {
                                @("N/A")
                            }
                        </dd>

                        @if (!string.IsNullOrWhiteSpace(Model.Notes))
                        {
                            <dt class="col-sm-4 text-muted fw-medium mt-2"><i class="fas fa-sticky-note me-2"></i>Notes</dt>
                            <dd class="col-sm-8 mt-2">
                                <div class="alert alert-light border-yellow p-2 small shadow-sm">
                                    @Html.Raw(Model.Notes.Replace("\n", "<br />"))
                                </div>
                            </dd>
                        }
                    </dl>
                </div>
            </div>
        </div>

        <div class="col-lg-5">
            <div class="card shadow-custom h-100">
                <div class="card-header bg-yellow-light">
                    <h5 class="mb-0 text-dark-gray"><i class="fas fa-users me-2 text-yellow"></i>Parties Involved</h5>
                </div>
                <div class="card-body p-4">
                    <div class="mb-3 pb-3 border-bottom border-light-gray">
                        <strong class="text-muted d-block mb-1"><i class="fas fa-user-tag me-2"></i>Sender</strong>
                        <div class="ps-3">
                            @if(Model.SenderUser != null)
                            {
                                <div>@Model.SenderUser.FirstName @Model.SenderUser.LastName (@Model.SenderUser.Username)</div>
                                <small class="text-muted">@Model.SenderUser.Email</small>
                            } else { <span class="text-muted">N/A</span> }
                        </div>
                    </div>
                    <div class="mb-3 pb-3 border-bottom border-light-gray">
                        <strong class="text-muted d-block mb-1"><i class="fas fa-user-check me-2"></i>Recipient</strong>
                         <div class="ps-3">
                            @if(Model.RecipientUser != null)
                            {
                                <div>@Model.RecipientUser.FirstName @Model.RecipientUser.LastName (@Model.RecipientUser.Username)</div>
                                <small class="text-muted">@Model.RecipientUser.Email</small>
                            } else { <span class="text-muted">N/A</span> }
                        </div>
                    </div>
                     @if (Model.AssignedCourier != null)
                    {
                        <div>
                            <strong class="text-muted d-block mb-1"><i class="fas fa-truck me-2"></i>Assigned Courier</strong>
                            <div class="ps-3">
                                <div>@Model.AssignedCourier.FirstName @Model.AssignedCourier.LastName (@Model.AssignedCourier.Username)</div>
                                <small class="text-muted">@Model.AssignedCourier.Email</small>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="col-12">
            <div class="card shadow-custom">
                 <div class="card-header bg-yellow-light">
                    <h5 class="mb-0 text-dark-gray"><i class="fas fa-map-signs me-2 text-yellow"></i>Addresses</h5>
                </div>
                <div class="card-body p-0">
                    <div class="row g-0">
                        <div class="col-md-6 border-end-md border-light-gray"> @* Use border-end-md for responsive border *@
                            <div class="p-4">
                                <h6 class="text-success fw-semibold mb-3"><i class="fas fa-map-marker-alt me-2"></i>Origin Address</h6>
                                @if (Model.OriginAddress != null)
                                {
                                    <address class="mb-0">
                                        <strong>@Model.OriginAddress.Street</strong><br>
                                        @Model.OriginAddress.City, @Model.OriginAddress.ZipCode<br>
                                        @Model.OriginAddress.Country
                                    </address>
                                } else { <span class="text-muted">N/A</span>}
                            </div>
                        </div>
                        <div class="col-md-6">
                             <div class="p-4">
                                <h6 class="text-warning fw-semibold mb-3"><i class="fas fa-flag-checkered me-2"></i>Destination Address</h6>
                                @if (Model.DestinationAddress != null)
                                {
                                    <address class="mb-0">
                                        <strong>@Model.DestinationAddress.Street</strong><br>
                                        @Model.DestinationAddress.City, @Model.DestinationAddress.ZipCode<br>
                                        @Model.DestinationAddress.Country
                                    </address>
                                } else { <span class="text-muted">N/A</span>}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card shadow-custom mt-4">
        <div class="card-header">
            <h5 class="mb-0"><i class="fas fa-map-marked-alt me-2"></i>Package Route</h5>
        </div>
        <div class="card-body p-3">
             @if (historyPointsForMap.Any() || currentLocationForMap != null)
            {
                <div id="packageMap"></div>
            }
            else
            {
                 <div class="p-4 text-center text-muted">
                     <i class="fas fa-map-marker-slash fa-2x mb-2"></i><br/>
                    No location data available to display on the map for this package.
                </div>
            }
        </div>
    </div>


    <div class="card shadow-custom mt-4">
        <div class="card-header">
            <h5 class="mb-0"><i class="fas fa-history me-2"></i>Package History Log</h5>
        </div>
        <div class="card-body p-0">
            @if (Model.History != null && Model.History.Any())
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover modern-table mb-0">
                        <thead class="table-light">
                            <tr>
                                <th><i class="fas fa-calendar-day me-1"></i>Date & Time</th>
                                <th><i class="fas fa-info-circle me-1"></i>Status</th>
                                <th><i class="fas fa-map-pin me-1"></i>Location (Lat, Lon)</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var historyEntry in Model.History.OrderByDescending(h => h.Timestamp))
                            {
                                <tr class="@(historyEntry.Status?.Name?.ToLower().Replace(" ", "-"))">
                                    <td>@historyEntry.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                    <td>
                                        <span class="badge @GetStatusBadgeClass(historyEntry.Status?.Name)">
                                            @(historyEntry.Status?.Description ?? "N/A")
                                        </span>
                                    </td>
                                    <td>
                                        @if (historyEntry.Latitude.HasValue && historyEntry.Longitude.HasValue)
                                        {
                                            @($"Lat: {historyEntry.Latitude.Value.ToString("F5", CultureInfo.InvariantCulture)}, Lon: {historyEntry.Longitude.Value.ToString("F5", CultureInfo.InvariantCulture)}")
                                            <a href="@($"https://www.google.com/maps?q={historyEntry.Latitude.Value.ToString(CultureInfo.InvariantCulture)},{historyEntry.Longitude.Value.ToString(CultureInfo.InvariantCulture)}")" target="_blank" class="ms-2 small text-decoration-none" title="Show on Google Maps">
                                                <i class="fas fa-external-link-alt"></i>
                                            </a>
                                        }
                                        else
                                        {
                                            @("Unknown")
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="p-4 text-center text-muted">
                     <i class="fas fa-folder-open fa-2x mb-2"></i><br/>
                    No history entries for this package yet.
                </div>
            }
        </div>
    </div>

    <hr class="my-4"/>
    <div class="d-flex justify-content-between align-items-center mb-4">
        <a href="@Url.Action(currentUserRole == "Courier" ? "ActivePackages" : "Index", currentUserRole == "Courier" ? "Courier" : "Home")" class="btn btn-outline-secondary btn-lg shadow-sm">
            <i class="fas fa-arrow-left me-2"></i>Back to List
        </a>
        @if (Model.CurrentStatus?.Name != "Delivered" && (currentUserRole == "Courier" || currentUserRole == "Admin"))
        {
            <a href="@Url.Action("UpdateStatus", "Courier", new { id = Model.PackageId })" class="btn btn-primary btn-lg shadow-sm">
                <i class="fas fa-edit me-2"></i>Update Status
            </a>
        }
    </div>
}

@functions {
    private string GetStatusBadgeClass(string? statusName)
    {
        if (string.IsNullOrEmpty(statusName)) return "bg-secondary text-white";
        return statusName.ToLowerInvariant() switch
        {
            "sent" => "badge-info",
            "new order" => "badge-secondary",
            "processing" => "badge-processing",
            "in delivery" => "badge-in-delivery",
            "in transit" => "badge-in-transit",
            "delivered" => "badge-delivered",
            "failed" => "badge-failed",
            "cancelled" => "badge-cancelled",
            _ => "bg-primary text-white"
        };
    }
}

@section Scripts {
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
            integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
            crossorigin=""></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var historyPointsJson = @Html.Raw(Json.Serialize(historyPointsForMap));
            var currentLocationJson = @Html.Raw(Json.Serialize(currentLocationForMap));

            var mapElement = document.getElementById('packageMap');
            if (!mapElement) {
                // console.log('Map container not found on this page.');
                return;
            }

            if (historyPointsJson.length === 0 && !currentLocationJson) {
                 // console.log('No location data available for the map.');
                 // The container for the map might be hidden by Razor logic already
                 return;
            }

            var mapCenter = [20, 0];
            var mapZoom = 2;
            var allLatLngs = [];

            if (historyPointsJson.length > 0) {
                mapCenter = [historyPointsJson[0].lat, historyPointsJson[0].lng];
                mapZoom = 10;
            } else if (currentLocationJson) {
                mapCenter = [currentLocationJson.lat, currentLocationJson.lng];
                mapZoom = 13;
            }

            var map = L.map('packageMap').setView(mapCenter, mapZoom);

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
                maxZoom: 18,
                tileSize: 512,
                zoomOffset: -1
            }).addTo(map);

            // Define custom icons using local paths
            var historyIcon = L.icon({
                iconUrl: '/images/leaflet/marker-icon.png',
                iconRetinaUrl: '/images/leaflet/marker-icon-2x.png',
                shadowUrl: '/images/leaflet/marker-shadow.png',
                iconSize:    [25, 41],
                iconAnchor:  [12, 41],
                popupAnchor: [1, -34],
                shadowSize:  [41, 41]
            });

            var currentIcon = L.icon({
                iconUrl: '/images/leaflet/marker-icon-red.png', // Ensure you have marker-icon-red.png
                iconRetinaUrl: '/images/leaflet/marker-icon-2x-red.png', // and marker-icon-2x-red.png
                shadowUrl: '/images/leaflet/marker-shadow.png',
                iconSize:    [25, 41],
                iconAnchor:  [12, 41],
                popupAnchor: [1, -34],
                shadowSize:  [41, 41]
            });

            var polylinePoints = [];

            historyPointsJson.forEach(function(point, index) {
                var latLng = L.latLng(point.lat, point.lng);
                allLatLngs.push(latLng);
                polylinePoints.push(latLng);
                L.marker(latLng, {icon: historyIcon})
                    .addTo(map)
                    .bindPopup("<b>Status:</b> " + point.status + "<br><b>Time:</b> " + point.timestamp + "<br><b>Location:</b> " + point.lat.toFixed(5) + ", " + point.lng.toFixed(5));
            });

            if (currentLocationJson) {
                var currentLatLng = L.latLng(currentLocationJson.lat, currentLocationJson.lng);
                allLatLngs.push(currentLatLng);

                // Add current location to polyline if it's the latest point
                var isCurrentLatest = true;
                if(historyPointsJson.length > 0) {
                    // Assuming currentLocationJson has a 'timestamp' property similar to history points
                    // If not, you'll need to adjust this logic or add timestamp to currentLocationForMap
                    var lastHistoryTimestamp = historyPointsJson[historyPointsJson.length - 1].timestamp;
                    // if (currentLocationJson.timestamp && new Date(currentLocationJson.timestamp) <= new Date(lastHistoryTimestamp)) {
                    //    isCurrentLatest = false;
                    // }
                    // Simplified: if current is different from last history point, add to polyline
                     if (polylinePoints.length > 0 &&
                        (polylinePoints[polylinePoints.length-1].lat === currentLatLng.lat && polylinePoints[polylinePoints.length-1].lng === currentLatLng.lng)) {
                        isCurrentLatest = false; // Current is same as last history point
                     }
                }
                if(isCurrentLatest && (polylinePoints.length === 0 ||
                    (polylinePoints[polylinePoints.length-1].lat !== currentLatLng.lat || polylinePoints[polylinePoints.length-1].lng !== currentLatLng.lng))) {
                   polylinePoints.push(currentLatLng);
                }


                L.marker(currentLatLng, {icon: currentIcon, zIndexOffset: 1000 })
                    .addTo(map)
                    .bindPopup("<b>Current Status:</b> " + currentLocationJson.status + "<br><b>Location:</b> " + currentLatLng.lat.toFixed(5) + ", " + currentLatLng.lng.toFixed(5))
                    .openPopup();
            }

            if (polylinePoints.length > 1) {
                L.polyline(polylinePoints, {color: 'var(--primary-yellow-dark)', weight: 3, opacity: 0.7}).addTo(map);
            }

            if (allLatLngs.length > 0) {
                map.fitBounds(L.latLngBounds(allLatLngs), { padding: [40, 40] }); // Added padding
            } else if (!currentLocationJson && historyPointsJson.length === 0) {
                map.setView([51.505, -0.09], 2);
            }
        });
    </script>
}
